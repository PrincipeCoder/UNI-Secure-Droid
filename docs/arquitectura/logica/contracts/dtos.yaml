# dtos.yaml
# Contratos de datos (DTO) - Vista 1 Lógica
# Define los mensajes y respuestas que intercambian los componentes del sistema.

API:
  UploadResponse:
    type: object
    description: Respuesta al subir un APK.
    properties:
      job_id:
        type: string
        description: Identificador único del análisis.
      status:
        type: string
        enum: [queued, error]
        description: Estado inicial del trabajo.
    required: [job_id, status]

  StatusResponse:
    type: object
    description: Respuesta al consultar el estado del análisis.
    properties:
      job_id: { type: string }
      status:
        type: string
        enum: [queued, static, dynamic, done, error]
      phase:
        type: string
        description: Fase actual del análisis.
      eta:
        type: string
        nullable: true
        description: Tiempo estimado para terminar (opcional).
    required: [job_id, status]

  ReportResponse:
    type: object
    description: Respuesta final con el veredicto del análisis.
    properties:
      job_id: { type: string }
      verdict:
        type: string
        enum: [benign, malicious, undetermined]
      risk:
        type: string
        enum: [low, medium, high]
      top_signals:
        type: array
        items: { type: string }
      packed:
        type: boolean
      timestamps:
        type: object
        properties:
          uploaded: { type: string, format: date-time }
          finished: { type: string, format: date-time }
    required: [job_id, verdict, risk, top_signals, timestamps]

Queues:
  static_jobs:
    description: Mensaje enviado a StaticAnalyzer para iniciar el análisis estático.
    payload:
      type: object
      properties:
        job_id: { type: string }
        object_path: { type: string }
        sha256: { type: string }
      required: [job_id, object_path, sha256]

  dynamic_jobs:
    description: Mensaje enviado a DynamicRunner cuando el modelo necesita datos dinámicos.
    payload:
      type: object
      properties:
        job_id: { type: string }
        apk_path: { type: string }
      required: [job_id, apk_path]

Result:
  type: object
  description: Esquema del resultado final del análisis.
  properties:
    job_id: { type: string }
    verdict:
      type: string
      enum: [benign, malicious, undetermined]
    risk:
      type: string
      enum: [low, medium, high]
    top_signals:
      type: array
      items: { type: string }
    packed: { type: boolean }
    timestamps:
      type: object
      properties:
        uploaded: { type: string, format: date-time }
        finished: { type: string, format: date-time }
  required: [job_id, verdict, risk, top_signals, timestamps]

Internal:
  StaticFeatures:
    type: object
    description: Salida del StaticAnalyzer con datos estáticos del APK.
    properties:
      job_id: { type: string }
      static_features: { type: object }
    required: [job_id, static_features]

  DynamicFeatures:
    type: object
    description: Salida del DynamicRunner con datos dinámicos del APK.
    properties:
      job_id: { type: string }
      dynamic_features: { type: object }
    required: [job_id, dynamic_features]

  FeatureVector:
    type: object
    description: Vector unificado (estático + dinámico) listo para el modelo.
    properties:
      job_id: { type: string }
      vector:
        type: array
        items: { type: number }
    required: [job_id, vector]
